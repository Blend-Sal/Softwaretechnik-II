Index: Softwaretechnik2/src/test/java/com/example/softwaretechnik2/ProductTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.softwaretechnik2;\r\n\r\nimport com.example.softwaretechnik2.model.Availability;\r\nimport com.example.softwaretechnik2.model.Product;\r\nimport com.example.softwaretechnik2.repositories.ProductRepository;\r\nimport com.example.softwaretechnik2.services.ProductService;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.stream.Stream;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@SpringBootTest\r\nclass ProductTest extends Product {\r\n\r\n    @Autowired\r\n    private ProductService productService;\r\n    @Autowired\r\n    private ProductRepository repo;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        //Reihenfolge wichtig\r\n        Product banane = new Product();\r\n        banane.setCategory(\"Obst\");\r\n\r\n        Product kakao = new Product();\r\n        kakao.setCategory(\"Getränk\");\r\n        kakao.setProductName(\"Kakao\");\r\n\r\n        Product kaffee2go = new Product();\r\n        kaffee2go.setCategory(\"Getränk\");\r\n\r\n        Product salamibrötchen = new Product();\r\n        salamibrötchen.setCategory(\"Belegtes Brötchen\");\r\n\r\n        repo.save(banane);\r\n        repo.save(kakao);\r\n        repo.save(kaffee2go);\r\n        repo.save(salamibrötchen);\r\n    }\r\n\r\n    @Test\r\n    public void shouldSaveUser() {\r\n        Product product = new Product();\r\n        Product savedProduct = repo.save(product);\r\n        assertTrue(product.equals(savedProduct));\r\n        repo.delete(product);\r\n    }\r\n\r\n    @Test\r\n    void testFindProductsByCategory() {\r\n        List<Product> getränke = repo.findProductsByCategory(\"Getränk\");\r\n        Stream<Product> getränkeStream = getränke.stream();\r\n        assertTrue(getränkeStream.allMatch(x -> x.getCategory().equals(\"Getränk\")));\r\n    }\r\n\r\n    @Test\r\n    void testInitialProductNotBought() {\r\n        Product product = new Product();\r\n        assertFalse(repo.findProductById(4L).isBought());\r\n        repo.delete(product);\r\n    }\r\n\r\n    @Test\r\n    void testAutoGeneratedProductID() {\r\n        assertEquals(4L, repo.findProductsByCategory(\"Belegtes Brötchen\").get(0).getId());\r\n    }\r\n\r\n    @Test\r\n    void testProductIsBought() {\r\n        productService.buyProduct(repo.findProductById(1L));\r\n        assertTrue(repo.findProductById(1L).isBought());\r\n    }\r\n\r\n    @Test\r\n    void testFindProductByName() {\r\n        Product product = new Product();\r\n        product.setProductName(\"Hans\");\r\n        repo.save(product);\r\n        Product hans = repo.findProductByProductName(\"Hans\");\r\n        assertEquals(hans.getProductName(), \"Hans\");\r\n        repo.delete(product);\r\n    }\r\n\r\n    @Test\r\n    void exceedInputsetproductName() {\r\n        Product test = new Product();\r\n        assertFalse(test.setProductName(\"12345\"));\r\n    }\r\n\r\n    @Test\r\n    void exceedInputsetCategory() {\r\n        Product test = new Product();\r\n        assertFalse(test.setCategory(\"12345\"));\r\n    }\r\n\r\n    @Test\r\n    void onlyNumbersInput() {\r\n        Product test = new Product();\r\n        assertTrue(test.setId(1L));\r\n    }\r\n\r\n\r\n    @Test\r\n    void onlyNumbersinputsetPrice() {\r\n        Product test = new Product();\r\n        assertTrue(test.setPrice(3.01f));\r\n    }\r\n\r\n    @Test\r\n    void onlyStringInputSetIngredients() {\r\n        Product test = new Product();\r\n        List<String> ingredients = Arrays.asList(\"Salamibrötchen\", \"Schokobrötchen\");\r\n        assertTrue(test.setIngredients(ingredients));\r\n    }\r\n\r\n    @Test\r\n    void isKoshertest() {\r\n        Product test = new Product();\r\n        assertFalse(test.isKosher());\r\n\r\n        test.setKosher(true);\r\n        assertTrue(test.isKosher());\r\n\r\n        test.setKosher(false);\r\n        assertFalse(test.isKosher());\r\n    }\r\n\r\n    /* outdated, image is now stored as byte[]\r\n    @Test\r\n    void imageTest() {\r\n        Product product = new Product();\r\n        String expectedImage = \"example_image.jpg\";\r\n        product.setImage(expectedImage);\r\n        String actualImage = product.getImage();\r\n        assertEquals(expectedImage, actualImage);\r\n    }*/\r\n\r\n\r\n    @Test\r\n    void availabilitySavedAsString() {\r\n        Product test = new Product();\r\n        test.setAvailability(Availability.FULL);\r\n        repo.save(test);\r\n        assertEquals(\"Full\", test.getAvailability());\r\n        repo.delete(test);\r\n    }\r\n\r\n    @Test\r\n    void properAvailabilityDisplayName() {\r\n        Availability a = Availability.FULL;\r\n        assertEquals(\"Full\", a.getDisplayValue());\r\n    }\r\n\r\n    @Test\r\n    void testDeleteByProductName() {\r\n        Product milch = new Product();\r\n        milch.setProductName(\"Milch\");\r\n        repo.save(milch);\r\n        repo.deleteProductByProductName(\"Milch\");\r\n        assertNull(repo.findProductByProductName(\"Milch\"));\r\n    }\r\n\r\n    @Test\r\n    void testCheckIfProductAlreadyExists() {\r\n        Product p1 = new Product();\r\n        p1.setProductName(\"Mehl\");\r\n        repo.save(p1);\r\n        assertTrue(productService.checkIfProductExists(p1));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/src/test/java/com/example/softwaretechnik2/ProductTest.java b/Softwaretechnik2/src/test/java/com/example/softwaretechnik2/ProductTest.java
--- a/Softwaretechnik2/src/test/java/com/example/softwaretechnik2/ProductTest.java	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/src/test/java/com/example/softwaretechnik2/ProductTest.java	(date 1685995035977)
@@ -116,7 +116,7 @@
     @Test
     void onlyStringInputSetIngredients() {
         Product test = new Product();
-        List<String> ingredients = Arrays.asList("Salamibrötchen", "Schokobrötchen");
+        String ingredients = "Salamibrötchen, Schokobrötchen";
         assertTrue(test.setIngredients(ingredients));
     }
 
@@ -148,14 +148,14 @@
         Product test = new Product();
         test.setAvailability(Availability.FULL);
         repo.save(test);
-        assertEquals("Full", test.getAvailability());
+        assertEquals("Voll", test.getAvailability());
         repo.delete(test);
     }
 
     @Test
     void properAvailabilityDisplayName() {
         Availability a = Availability.FULL;
-        assertEquals("Full", a.getDisplayValue());
+        assertEquals("Voll", a.getDisplayValue());
     }
 
     @Test
@@ -174,4 +174,4 @@
         repo.save(p1);
         assertTrue(productService.checkIfProductExists(p1));
     }
-}
+}
\ No newline at end of file
Index: Softwaretechnik2/src/main/java/com/example/softwaretechnik2/controllers/ProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.softwaretechnik2.controllers;\r\n\r\nimport com.example.softwaretechnik2.model.Product;\r\nimport com.example.softwaretechnik2.repositories.ProductRepository;\r\nimport com.example.softwaretechnik2.services.ProductService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.util.StringUtils;\r\nimport org.springframework.validation.BindingResult;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport javax.servlet.ServletContext;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.Base64;\r\n\r\nimport java.util.List;\r\n\r\n@Controller\r\n//@RequestMapping(\"/product\")\r\npublic class ProductController extends Product {\r\n    @Autowired\r\n    ProductRepository repo;\r\n    @Autowired\r\n    ProductService productService;\r\n    @Autowired\r\n    private ServletContext servletContext;\r\n\r\n    @GetMapping(\"/product\")\r\n    public String getProd(Model model) {\r\n        List<Product> products = repo.getAllByProductNameIsNotNull();\r\n        model.addAttribute(\"products\", products);\r\n        return \"productList\";\r\n\r\n    }\r\n\r\n    @GetMapping(\"/produkterstellung\")\r\n    public String get(Model model) {\r\n        model.addAttribute(\"product\", new Product());\r\n        return \"produkterstellung\";\r\n    }\r\n\r\n    @GetMapping(\"/product/{id}\")\r\n    public String getProduct(@PathVariable Long id, Model model) {\r\n        Product product = repo.findProductById(id);\r\n        byte[] imageData = product.getImage();\r\n        String base64Image = Base64.getEncoder().encodeToString(imageData);\r\n        model.addAttribute(\"Image\", base64Image);\r\n        model.addAttribute(\"product\", product);\r\n        return \"detailsofproduct\";\r\n    }\r\n\r\n    //optimal image resolution is about 400x400 -> implement resize?\r\n    @PostMapping(\"/produkterstellung\")\r\n    public String post(@ModelAttribute Product newProduct, BindingResult result, @RequestParam(\"image\") MultipartFile image) throws IOException {\r\n        System.out.println(\"here\");\r\n        if (productService.checkIfProductExists(newProduct)) {\r\n            return \"errorDuplicateProduct\";\r\n        }\r\n        byte[] imageBytes = image.getBytes();\r\n        newProduct.setImage(imageBytes);\r\n        repo.save(newProduct);\r\n        return \"redirect:product/\" + newProduct.getId();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/controllers/ProductController.java b/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/controllers/ProductController.java
--- a/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/controllers/ProductController.java	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/controllers/ProductController.java	(date 1685995270225)
@@ -20,8 +20,6 @@
 import java.io.IOException;
 import java.util.Base64;
 
-import java.util.List;
-
 @Controller
 //@RequestMapping("/product")
 public class ProductController extends Product {
@@ -33,11 +31,8 @@
     private ServletContext servletContext;
 
     @GetMapping("/product")
-    public String getProd(Model model) {
-        List<Product> products = repo.getAllByProductNameIsNotNull();
-        model.addAttribute("products", products);
+    public String getProd() {
         return "productList";
-
     }
 
     @GetMapping("/produkterstellung")
Index: Softwaretechnik2/src/main/resources/templates/detailsofproduct.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Product Details</title>\r\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\">\r\n</head>\r\n<body>\r\n<button type=\"submit\">\r\n    <img src=\"https://cdn-icons-png.flaticon.com/512/61/61972.png\" height=\"50\" width=\"50\" alt=\"buttonpng\"/>\r\n</button>\r\n<div class=\"container\">\r\n    <h1 class=\"mb-4\" th:text=\"${product.getProductName()}\"></h1>\r\n    <img th:src=\"'data:image/png;base64,' + ${Image}\" class=\"img-thumbnail\" alt=\"Produkt\">\r\n</div>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/src/main/resources/templates/detailsofproduct.html b/Softwaretechnik2/src/main/resources/templates/detailsofproduct.html
--- a/Softwaretechnik2/src/main/resources/templates/detailsofproduct.html	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/src/main/resources/templates/detailsofproduct.html	(date 1685995012250)
@@ -1,17 +1,90 @@
 <!DOCTYPE html>
-<html xmlns:th="http://www.thymeleaf.org">
+<html xmlns:th="http://www.thymeleaf.org" lang="en">
 <head>
     <meta charset="UTF-8">
     <title>Product Details</title>
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">
 </head>
 <body>
-<button type="submit">
-    <img src="https://cdn-icons-png.flaticon.com/512/61/61972.png" height="50" width="50" alt="buttonpng"/>
-</button>
+<form class="d-flex m-auto w-25 mt-2 mb-2">
+    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
+    <button class="btn btn-outline-success" type="submit">Search</button>
+</form>
+<nav class="navbar navbar-expand-lg navbar-light bg-light text-center">
+    <div class="container-fluid">
+        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo01"
+                aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
+            <span class="navbar-toggler-icon"></span>
+        </button>
+        <div class="collapse navbar-collapse justify-content-center" id="navbarTogglerDemo01">
+            <a class="navbar-brand" href="#"></a>
+            <ul class="navbar-nav mb-2 mb-lg-0">
+                <li class="nav-item">
+                    <a class="nav-link active" aria-current="page" href="qrcodeinput">
+                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
+                             class="bi bi-qr-code-scan" viewBox="0 0 16 16">
+                            <path d="M0 .5A.5.5 0 0 1 .5 0h3a.5.5 0 0 1 0 1H1v2.5a.5.5 0 0 1-1 0v-3Zm12 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0V1h-2.5a.5.5 0 0 1-.5-.5ZM.5 12a.5.5 0 0 1 .5.5V15h2.5a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5Zm15 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H15v-2.5a.5.5 0 0 1 .5-.5ZM4 4h1v1H4V4Z"/>
+                            <path d="M7 2H2v5h5V2ZM3 3h3v3H3V3Zm2 8H4v1h1v-1Z"/>
+                            <path d="M7 9H2v5h5V9Zm-4 1h3v3H3v-3Zm8-6h1v1h-1V4Z"/>
+                            <path d="M9 2h5v5H9V2Zm1 1v3h3V3h-3ZM8 8v2h1v1H8v1h2v-2h1v2h1v-1h2v-1h-3V8H8Zm2 2H9V9h1v1Zm4 2h-1v1h-2v1h3v-2Zm-4 2v-1H8v1h2Z"/>
+                            <path d="M12 9h2V8h-2v1Z"/>
+                        </svg>
+                    </a>
+                </li>
+                <li class="nav-item">
+                    <a class="nav-link active" aria-current="page" href="/produkterstellung">Produkt erstellen</a>
+                </li>
+                <li class="nav-item">
+                    <a class="nav-link active" aria-current="page" href="#">Meine Reservierun</a>
+                </li>
+                <li class="nav-item">
+                    <a class="nav-link active" aria-current="page" href="#">Bewertungen</a>
+                </li>
+                <li class="nav-item">
+                    <a class="nav-link active" aria-current="page" href="#">Shop-Infos</a>
+                </li>
+                <li class="nav-item">
+                    <a class="nav-link active" aria-current="page" href="#">
+                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
+                             class="bi bi-house" viewBox="0 0 16 16">
+                            <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"/>
+                        </svg>
+                    </a>
+                </li>
+            </ul>
+        </div>
+    </div>
+</nav>
 <div class="container">
     <h1 class="mb-4" th:text="${product.getProductName()}"></h1>
-    <img th:src="'data:image/png;base64,' + ${Image}" class="img-thumbnail" alt="Produkt">
+    <div class="row">
+        <img th:src="'data:image/png;base64,' + ${Image}" class="img-fluid" alt="Produkt"
+             style="width: 400px; height: 400px;  "src="">
+        <div class="col-md-6 d-flex flex-column">
+            <div class="row mt-auto">
+                <div class="col-5">
+                    <h6 class="mb-4">Preis:</h6>
+                    <h6 class="mb-4">Verfügbarkeit:</h6>
+                    <h6 class="mb-4">Zutaten:</h6>
+                    <h6 class="mb-4">Allergene:</h6>
+                    <h6 class="mb-4">Kosher:</h6>
+                    <h6 class="mb-4">Halal:</h6>
+                    <h6 class="mb-4">Vegan:</h6>
+                    <h6>Vegetarisch:</h6>
+                </div>
+                <div class="col-6">
+                    <h6 class="mb-4" th:text="${product.getPrice()} + '€'"></h6>
+                    <h6 class="mb-4" th:text="${product.getAvailability()}"></h6>
+                    <h6 class="mb-4" th:text="${product.getIngredients()}"></h6>
+                    <h6 class="mb-4" th:text="${product.getAllergens()}"></h6>
+                    <h6 class="mb-4" th:text="${product.isKosher()} ? 'Ja' : 'Nein'"></h6>
+                    <h6 class="mb-4" th:text="${product.isHalal()} ? 'Ja' : 'Nein'"></h6>
+                    <h6 class="mb-4" th:text="${product.isVegan()} ? 'Ja' : 'Nein'"></h6>
+                    <h6 th:text="${product.isVegetarian()} ? 'Ja' : 'Nein'"></h6>
+                </div>
+            </div>
+        </div>
+    </div>
 </div>
 </body>
-</html>
+</html>
\ No newline at end of file
Index: Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Availability.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.softwaretechnik2.model;\r\n\r\npublic enum Availability {\r\n    EMPTY(\"Empty\"),\r\n    LOW(\"Low\"),\r\n    HALF(\"Half\"),\r\n    NEARLY_FULL(\"Nearly full\"),\r\n    FULL(\"Full\");\r\n\r\n    private final String displayValue;\r\n\r\n    private Availability(String displayValue) {\r\n        this.displayValue = displayValue;\r\n    }\r\n\r\n    public String getDisplayValue() {\r\n        return displayValue;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Availability.java b/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Availability.java
--- a/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Availability.java	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Availability.java	(date 1685994954095)
@@ -1,11 +1,11 @@
 package com.example.softwaretechnik2.model;
 
 public enum Availability {
-    EMPTY("Empty"),
-    LOW("Low"),
-    HALF("Half"),
-    NEARLY_FULL("Nearly full"),
-    FULL("Full");
+    EMPTY("Leer"),
+    LOW("Gering"),
+    HALF("Hälfte noch da"),
+    NEARLY_FULL("Nahezu voll"),
+    FULL("Voll");
 
     private final String displayValue;
 
@@ -16,4 +16,4 @@
     public String getDisplayValue() {
         return displayValue;
     }
-}
+}
\ No newline at end of file
Index: Softwaretechnik2/src/main/resources/templates/produkterstellung.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Produkterstellung</title>\r\n</head>\r\n<body>\r\n<h1>Neues Produkt anlegen</h1>\r\n\r\n<form method=\"post\" th:action=\"@{/produkterstellung}\" enctype=\"multipart/form-data\">\r\n    <label for=\"produktName\">Name des Produktes*:</label>\r\n    <input type=\"text\" id=\"produktName\" name=\"productName\" required ><br><br>\r\n\r\n    <label for=\"bild\">Bild*:</label>\r\n    <input type=\"file\" id=\"bild\" name=\"image\" accept=\"image/*\" required><br><br>\r\n\r\n    <label for=\"preis\">Preis*:</label>\r\n    <input type=\"number\" step=\"0.01\" min=\"0.0\" id=\"preis\" name=\"price\" required><span>€</span><br><br>\r\n\r\n    <label for=\"verfügbarkeit\">Verfügbarkeit:</label><br>\r\n        <select name=\"availability\" id=\"verfügbarkeit\">\r\n            <option th:each=\"availabilityOpt : ${T(com.example.softwaretechnik2.model.Availability).values()}\"\r\n                    th:value=\"${availabilityOpt}\" th:text=\"${availabilityOpt.displayValue}\"></option>\r\n        </select><br><br>\r\n\r\n    <label for=\"halal\">Halal?</label>\r\n    <input type=\"checkbox\" id=\"halal\" name=\"halal\"><br><br>\r\n\r\n    <label for=\"koscher\">Koscher?</label>\r\n    <input type=\"checkbox\" id=\"koscher\" name=\"kosher\"><br><br>\r\n\r\n    <label for=\"vegetarisch\">Vegetarisch?</label>\r\n    <input type=\"checkbox\" id=\"vegetarisch\" name=\"vegetarian\"><br><br>\r\n\r\n    <label for=\"vegan\">Vegan?</label>\r\n    <input type=\"checkbox\" id=\"vegan\" name=\"vegan\"><br><br>\r\n\r\n    <label for=\"allergene\">Moegliche Allergene:</label><br>\r\n    <textarea id=\"allergene\" name=\"allergens\"></textarea><br><br> <!--resize off-->\r\n\r\n    <label for=\"inhaltsstoffe\">Zutaten:</label><br>\r\n    <datalist id=\"inhaltsstoffe\"></datalist>\r\n    <label><input type=\"text\" list=\"inhaltsstoffe\" multiple></label><br>\r\n    <details>\r\n        <summary>Liste an Inhaltsstoffen</summary>\r\n        <p>Weizenmehl<br>Kuhmilch<br>Zucker<br>Kaffee<br>Wasser<br>Kakao</p>\r\n    </details>\r\n\r\n    <p>Pflichtfelder sind mit '*' gekennzeichnet.</p> <!--cursive-->\r\n    <input type=\"submit\" value=\"Produkt speichern\" onclick=\"showNotification()\">\r\n    <button type=\"button\" class=\"btn btn-primary m-lg-3\" th:onclick=\"|window.location.href='/product'|\">Produktseite</button>\r\n    <button type=\"button\" class=\"btn btn-primary m-lg-3\" th:onclick=\"|window.location.href='/start'|\">Startseite</button>\r\n\r\n</form>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/src/main/resources/templates/produkterstellung.html b/Softwaretechnik2/src/main/resources/templates/produkterstellung.html
--- a/Softwaretechnik2/src/main/resources/templates/produkterstellung.html	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/src/main/resources/templates/produkterstellung.html	(date 1685995021795)
@@ -1,55 +1,110 @@
 <!DOCTYPE html>
-<html>
+<html lang="en">
 <head>
     <title>Produkterstellung</title>
+    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
+    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 </head>
 <body>
-<h1>Neues Produkt anlegen</h1>
+<div class="container">
+    <h1>Neues Produkt anlegen</h1>
 
-<form method="post" th:action="@{/produkterstellung}" enctype="multipart/form-data">
-    <label for="produktName">Name des Produktes*:</label>
-    <input type="text" id="produktName" name="productName" required ><br><br>
+    <form method="post" th:action="@{/produkterstellung}" enctype="multipart/form-data">
+        <div class="form-group">
+            <label for="produktName">Name des Produktes*:</label>
+            <input type="text" id="produktName" name="productName" required class="form-control">
+        </div>
 
-    <label for="bild">Bild*:</label>
-    <input type="file" id="bild" name="image" accept="image/*" required><br><br>
+        <div class="form-group">
+            <label for="bild">Bild*:</label>
+            <input type="file" id="bild" name="image" accept="image/*" required class="form-control-file">
+        </div>
 
-    <label for="preis">Preis*:</label>
-    <input type="number" step="0.01" min="0.0" id="preis" name="price" required><span>€</span><br><br>
+        <div class="form-group">
+            <label for="preis">Preis*:</label>
+            <input type="number" step="0.01" min="0.0" id="preis" name="price" required class="form-control">
+            <span>€</span>
+        </div>
 
-    <label for="verfügbarkeit">Verfügbarkeit:</label><br>
-        <select name="availability" id="verfügbarkeit">
-            <option th:each="availabilityOpt : ${T(com.example.softwaretechnik2.model.Availability).values()}"
-                    th:value="${availabilityOpt}" th:text="${availabilityOpt.displayValue}"></option>
-        </select><br><br>
+        <div class="form-group">
+            <label for="verfügbarkeit">Verfügbarkeit:</label>
+            <select name="availability" id="verfügbarkeit" class="form-control">
+                <option th:each="availabilityOpt : ${T(com.example.softwaretechnik2.model.Availability).values()}"
+                        th:value="${availabilityOpt}" th:text="${availabilityOpt.displayValue}"></option>
+            </select>
+        </div>
 
-    <label for="halal">Halal?</label>
-    <input type="checkbox" id="halal" name="halal"><br><br>
+        <div class="form-group form-check">
+            <label for="halal" class="form-check-label">
+                <input type="checkbox" id="halal" name="halal" class="form-check-input"> Halal?
+            </label>
+        </div>
 
-    <label for="koscher">Koscher?</label>
-    <input type="checkbox" id="koscher" name="kosher"><br><br>
+        <div class="form-group form-check">
+            <label for="koscher" class="form-check-label">
+                <input type="checkbox" id="koscher" name="kosher" class="form-check-input"> Koscher?
+            </label>
+        </div>
 
-    <label for="vegetarisch">Vegetarisch?</label>
-    <input type="checkbox" id="vegetarisch" name="vegetarian"><br><br>
+        <div class="form-group form-check">
+            <label for="vegetarisch" class="form-check-label">
+                <input type="checkbox" id="vegetarisch" name="vegetarian" class="form-check-input"> Vegetarisch?
+            </label>
+        </div>
 
-    <label for="vegan">Vegan?</label>
-    <input type="checkbox" id="vegan" name="vegan"><br><br>
+        <div class="form-group form-check">
+            <label for="vegan" class="form-check-label">
+                <input type="checkbox" id="vegan" name="vegan" class="form-check-input"> Vegan?
+            </label>
+        </div>
 
-    <label for="allergene">Moegliche Allergene:</label><br>
-    <textarea id="allergene" name="allergens"></textarea><br><br> <!--resize off-->
+        <div class="form-group">
+            <label for="allergene">Moegliche Allergene:</label>
+            <textarea id="allergene" name="allergens" class="form-control">Keine</textarea>
+        </div>
 
-    <label for="inhaltsstoffe">Zutaten:</label><br>
-    <datalist id="inhaltsstoffe"></datalist>
-    <label><input type="text" list="inhaltsstoffe" multiple></label><br>
-    <details>
-        <summary>Liste an Inhaltsstoffen</summary>
-        <p>Weizenmehl<br>Kuhmilch<br>Zucker<br>Kaffee<br>Wasser<br>Kakao</p>
-    </details>
+        <div class="form-group">
+            <label for="inhaltsstoffe">Zutaten:</label>
+            <input type="text" list="inhaltsstoffe" id="ingredient-input" name="ingredients" class="form-control">
+            <datalist id="inhaltsstoffe">
+                <option>Weizenmehl</option>
+                <option>Kuhmilch</option>
+                <option>Zucker</option>
+                <option>Kaffee</option>
+                <option>Wasser</option>
+                <option>Kakao</option>
+            </datalist>
+        </div>
+        <details>
+            <summary>Liste an Inhaltsstoffen</summary>
+            <p>Weizenmehl<br>Kuhmilch<br>Zucker<br>Kaffee<br>Wasser<br>Kakao</p>
+        </details>
 
-    <p>Pflichtfelder sind mit '*' gekennzeichnet.</p> <!--cursive-->
-    <input type="submit" value="Produkt speichern" onclick="showNotification()">
-    <button type="button" class="btn btn-primary m-lg-3" th:onclick="|window.location.href='/product'|">Produktseite</button>
-    <button type="button" class="btn btn-primary m-lg-3" th:onclick="|window.location.href='/start'|">Startseite</button>
-
-</form>
+        <p>Pflichtfelder sind mit '*' gekennzeichnet.</p>
+        <input type="submit" value="Produkt speichern" onclick="showNotification()" class="btn btn-primary">
+        <button type="button" class="btn btn-primary" th:onclick="|window.location.href='/product'|">Produktseite
+        </button>
+        <button type="button" class="btn btn-primary" th:onclick="|window.location.href='/product'|">Startseite</button>
+    </form>
+</div>
+
+<script>
+    $(document).ready(function () {
+        $('#ingredient-input').on('input', function () {
+            const inputField = $(this);
+            const selectedIngredient = inputField.val();
+            const options = $('#inhaltsstoffe option');
+
+            options.each(function() {
+                if ($(this).val() === selectedIngredient) {
+                    const currentValue = inputField.data('selected') || '';
+                    const newValue = currentValue ? currentValue + ', ' + selectedIngredient : selectedIngredient;
+                    inputField.data('selected', newValue);
+                    inputField.val(newValue);
+                }
+            });
+        });
+    });
+</script>
 </body>
 </html>
Index: Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.softwaretechnik2.model;\r\n\r\nimport javax.persistence.*;\r\nimport java.util.List;\r\n@Entity\r\n@Table(name = \"product\")\r\npublic class Product {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    @Column(name = \"Product_ID\")\r\n    private Long id;\r\n\r\n    @Column(name = \"Productname\")\r\n    private String productName;\r\n\r\n    @Column(name = \"IsBought\")\r\n    private boolean isBought = false;\r\n\r\n    @Column(name = \"Category\")\r\n    private String category;\r\n\r\n    @Column(name = \"Image\")\r\n    @Lob\r\n    byte[] image;\r\n    @Column(name = \"Allergens\")\r\n    private String allergens;\r\n\r\n    @Column(name = \"Vegan\")\r\n    private boolean vegan;\r\n\r\n    @Column(name = \"Vegetarian\")\r\n    private boolean vegetarian;\r\n\r\n    @Column(name = \"Halal\")\r\n    private boolean halal;\r\n\r\n    @Column(name = \"Kosher\")\r\n    private boolean kosher;\r\n\r\n    @Column(name = \"Availability\")\r\n    private String availability;\r\n\r\n    @Column(name = \"Price\")\r\n    private float price;\r\n\r\n    @ElementCollection\r\n    @Column(name = \"Ingredients\")\r\n    private List<String> ingredients;\r\n\r\n    public boolean isEqualTo(Product anotherProduct) {\r\n        return this.productName.equals(anotherProduct.productName);\r\n    }\r\n\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    public boolean setCategory(String category) {\r\n        if (category.matches(\"\\\\d+\")) {\r\n            return false;\r\n        } else {\r\n            this.category = category;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isBought() {\r\n        return isBought;\r\n    }\r\n\r\n    public void setBought(boolean bought) {\r\n        isBought = bought;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public boolean setId(Long id) {\r\n        if (id != null && String.valueOf(id).matches(\"\\\\d+\" + \"L\")) {\r\n            return false;\r\n        } else {\r\n            this.id = id;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public String getProductName() {\r\n        return productName;\r\n    }\r\n\r\n    public boolean setProductName(String productName) {\r\n        if (productName.matches(\"\\\\d+\")) {\r\n            return false;\r\n        } else {\r\n            this.productName = productName;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public byte[] getImage() {\r\n        return image;\r\n    }\r\n\r\n    public void setImage(byte[] image) {\r\n        this.image = image;\r\n    }\r\n\r\n    public String getAllergens() {\r\n        return allergens;\r\n    }\r\n\r\n    public void setAllergens(String allergens) {\r\n        this.allergens = allergens;\r\n    }\r\n\r\n    public boolean isVegan() {\r\n        return vegan;\r\n    }\r\n\r\n    public void setVegan(boolean vegan) {\r\n        this.vegan = vegan;\r\n    }\r\n\r\n    public boolean isVegetarian() {\r\n        return vegetarian;\r\n    }\r\n\r\n    public void setVegetarian(boolean vegetarian) {\r\n        this.vegetarian = vegetarian;\r\n    }\r\n\r\n    public boolean isHalal() {\r\n        return halal;\r\n    }\r\n\r\n    public boolean setHalal(boolean halal) {\r\n        if (!halal) {\r\n            return false;\r\n        } else {\r\n            this.halal = halal;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isKosher() {\r\n        return kosher;\r\n    }\r\n\r\n    public void setKosher(boolean kosher) {\r\n        this.kosher = kosher;\r\n    }\r\n\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    public void setAvailability(Availability availability) {\r\n        this.availability = availability.getDisplayValue();\r\n    }\r\n\r\n    public float getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public boolean setPrice(float price) {\r\n        if (id != null && String.valueOf(id).matches(\"\\\\d+\")) {\r\n            return false;\r\n        } else {\r\n            this.price = price;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public List<String> getIngredients() {\r\n        return ingredients;\r\n    }\r\n\r\n    public boolean setIngredients(List<String> ingredients) {\r\n        String regex = \"^[a-zA-ZäöüÄÖÜ,\\\\s]+$\";\r\n        if (!ingredients.stream().allMatch(ingredient -> ingredient.matches(regex))) {\r\n            return false;\r\n        } else {\r\n            this.ingredients = ingredients;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Product{\" +\r\n                \"id=\" + id +\r\n                \", productName='\" + productName + '\\'' +\r\n                \", isBought=\" + isBought +\r\n                \", category='\" + category + '\\'' +\r\n                \", image='\" + image + '\\'' +\r\n                \", allergens='\" + allergens + '\\'' +\r\n                \", vegan=\" + vegan +\r\n                \", vegetarian=\" + vegetarian +\r\n                \", halal=\" + halal +\r\n                \", kosher=\" + kosher +\r\n                \", availability=\" + availability +\r\n                \", price=\" + price +\r\n                \", ingredients=\" + ingredients +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Product.java b/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Product.java
--- a/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Product.java	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/src/main/java/com/example/softwaretechnik2/model/Product.java	(date 1685994968540)
@@ -44,9 +44,8 @@
     @Column(name = "Price")
     private float price;
 
-    @ElementCollection
     @Column(name = "Ingredients")
-    private List<String> ingredients;
+    private String ingredients;
 
     public boolean isEqualTo(Product anotherProduct) {
         return this.productName.equals(anotherProduct.productName);
@@ -173,13 +172,13 @@
         return true;
     }
 
-    public List<String> getIngredients() {
+    public String getIngredients() {
         return ingredients;
     }
 
-    public boolean setIngredients(List<String> ingredients) {
-        String regex = "^[a-zA-ZäöüÄÖÜ,\\s]+$";
-        if (!ingredients.stream().allMatch(ingredient -> ingredient.matches(regex))) {
+    public boolean setIngredients(String ingredients) {
+        String regex = "^([^0-9]*)$";
+        if (!ingredients.matches(regex)) {
             return false;
         } else {
             this.ingredients = ingredients;
@@ -205,4 +204,4 @@
                 ", ingredients=" + ingredients +
                 '}';
     }
-}
+}
\ No newline at end of file
Index: Softwaretechnik2/target/classes/templates/product.html
===================================================================
diff --git a/Softwaretechnik2/target/classes/templates/product.html b/Softwaretechnik2/target/classes/templates/product.html
deleted file mode 100644
--- a/Softwaretechnik2/target/classes/templates/product.html	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ /dev/null	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
@@ -1,67 +0,0 @@
-<!DOCTYPE html>
-<html lang="en"
-      xmlns:th="http://www.thymeleaf.org"
->
-<head>
-    <meta charset="UTF-8">
-    <title>Asta-Shop</title>
-    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
-          crossorigin="anonymous"/>
-</head>
-<body>
-<form class="d-flex m-auto w-25 mt-2 mb-2">
-    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
-    <button class="btn btn-outline-success" type="submit">Search</button>
-</form>
-<nav class="navbar navbar-expand-lg navbar-light bg-light text-center">
-    <div class="container-fluid">
-        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo01"
-                aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
-            <span class="navbar-toggler-icon"></span>
-        </button>
-        <div class="collapse navbar-collapse justify-content-center" id="navbarTogglerDemo01">
-            <a class="navbar-brand" href="#"></a>
-            <ul class="navbar-nav mb-2 mb-lg-0">
-                <li class="nav-item">
-                    <a class="nav-link active" aria-current="page" href="#">
-                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
-                             class="bi bi-qr-code-scan" viewBox="0 0 16 16">
-                            <path d="M0 .5A.5.5 0 0 1 .5 0h3a.5.5 0 0 1 0 1H1v2.5a.5.5 0 0 1-1 0v-3Zm12 0a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0V1h-2.5a.5.5 0 0 1-.5-.5ZM.5 12a.5.5 0 0 1 .5.5V15h2.5a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5v-3a.5.5 0 0 1 .5-.5Zm15 0a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H15v-2.5a.5.5 0 0 1 .5-.5ZM4 4h1v1H4V4Z"/>
-                            <path d="M7 2H2v5h5V2ZM3 3h3v3H3V3Zm2 8H4v1h1v-1Z"/>
-                            <path d="M7 9H2v5h5V9Zm-4 1h3v3H3v-3Zm8-6h1v1h-1V4Z"/>
-                            <path d="M9 2h5v5H9V2Zm1 1v3h3V3h-3ZM8 8v2h1v1H8v1h2v-2h1v2h1v-1h2v-1h-3V8H8Zm2 2H9V9h1v1Zm4 2h-1v1h-2v1h3v-2Zm-4 2v-1H8v1h2Z"/>
-                            <path d="M12 9h2V8h-2v1Z"/>
-                        </svg>
-                    </a>
-                </li>
-                <li class="nav-item">
-                    <a class="nav-link active" aria-current="page" href="">Sortiment</a> <!-- Produktliste -->
-                </li>
-                <li class="nav-item">
-                    <a class="nav-link active" aria-current="page" href="#">Meine Reservierung</a>
-                </li>
-                <li class="nav-item">
-                    <a class="nav-link active" aria-current="page" href="#">Bewertungen</a>
-                </li>
-                <li class="nav-item">
-                    <a class="nav-link active" aria-current="page" href="#">Shop-Infos</a>
-                </li>
-                <li class="nav-item">
-                    <a class="nav-link active" aria-current="page" href="/produkterstellung">
-                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
-                             class="bi bi-house" viewBox="0 0 16 16">
-                            <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z"/>
-                        </svg>
-                    </a>
-                </li>
-            </ul>
-        </div>
-    </div>
-</nav>
-<div class="list-group align-middle" th:each="product : ${products}" th:if="${product != null}">
-    <a href="#" class="list-group-item list-group-item-action w-25 m-lg-3 active"
-       th:text="${product.getProductName()}">
-    </a>
-</div>
-</body>
-</html>
\ No newline at end of file
Index: Softwaretechnik2/target/classes/templates/produkterstellung.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Produkterstellung</title>\r\n</head>\r\n<body>\r\n<h1>Neues Produkt anlegen</h1>\r\n\r\n<form method=\"post\" th:action=\"@{/produkterstellung}\" enctype=\"multipart/form-data\">\r\n    <label for=\"produktName\">Name des Produktes*:</label>\r\n    <input type=\"text\" id=\"produktName\" name=\"productName\" required ><br><br>\r\n\r\n    <label for=\"bild\">Bild*:</label>\r\n    <input type=\"file\" id=\"bild\" name=\"image\" accept=\"image/*\" required><br><br>\r\n\r\n    <label for=\"preis\">Preis*:</label>\r\n    <input type=\"number\" step=\"0.01\" min=\"0.0\" id=\"preis\" name=\"price\" required><span>€</span><br><br>\r\n\r\n    <label for=\"verfügbarkeit\">Verfügbarkeit:</label><br>\r\n        <select name=\"availability\" id=\"verfügbarkeit\">\r\n            <option th:each=\"availabilityOpt : ${T(com.example.softwaretechnik2.model.Availability).values()}\"\r\n                    th:value=\"${availabilityOpt}\" th:text=\"${availabilityOpt.displayValue}\"></option>\r\n        </select><br><br>\r\n\r\n    <label for=\"halal\">Halal?</label>\r\n    <input type=\"checkbox\" id=\"halal\" name=\"halal\"><br><br>\r\n\r\n    <label for=\"koscher\">Koscher?</label>\r\n    <input type=\"checkbox\" id=\"koscher\" name=\"kosher\"><br><br>\r\n\r\n    <label for=\"vegetarisch\">Vegetarisch?</label>\r\n    <input type=\"checkbox\" id=\"vegetarisch\" name=\"vegetarian\"><br><br>\r\n\r\n    <label for=\"vegan\">Vegan?</label>\r\n    <input type=\"checkbox\" id=\"vegan\" name=\"vegan\"><br><br>\r\n\r\n    <label for=\"allergene\">Moegliche Allergene:</label><br>\r\n    <textarea id=\"allergene\" name=\"allergens\"></textarea><br><br> <!--resize off-->\r\n\r\n    <label for=\"inhaltsstoffe\">Zutaten:</label><br>\r\n    <datalist id=\"inhaltsstoffe\"></datalist>\r\n    <label><input type=\"text\" list=\"inhaltsstoffe\" multiple></label><br>\r\n    <details>\r\n        <summary>Liste an Inhaltsstoffen</summary>\r\n        <p>Weizenmehl<br>Kuhmilch<br>Zucker<br>Kaffee<br>Wasser<br>Kakao</p>\r\n    </details>\r\n\r\n    <p>Pflichtfelder sind mit '*' gekennzeichnet.</p> <!--cursive-->\r\n    <input type=\"submit\" value=\"Produkt speichern\" onclick=\"showNotification()\">\r\n    <button type=\"button\" class=\"btn btn-primary m-lg-3\" th:onclick=\"|window.location.href='/product'|\">Produktseite</button>\r\n    <button type=\"button\" class=\"btn btn-primary m-lg-3\" th:onclick=\"|window.location.href='/start'|\">Startseite</button>\r\n\r\n</form>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Softwaretechnik2/target/classes/templates/produkterstellung.html b/Softwaretechnik2/target/classes/templates/produkterstellung.html
--- a/Softwaretechnik2/target/classes/templates/produkterstellung.html	(revision 558930f22a856599d22e620aac8f39ff6d01baa4)
+++ b/Softwaretechnik2/target/classes/templates/produkterstellung.html	(date 1685995021795)
@@ -1,55 +1,110 @@
 <!DOCTYPE html>
-<html>
+<html lang="en">
 <head>
     <title>Produkterstellung</title>
+    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
+    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 </head>
 <body>
-<h1>Neues Produkt anlegen</h1>
+<div class="container">
+    <h1>Neues Produkt anlegen</h1>
 
-<form method="post" th:action="@{/produkterstellung}" enctype="multipart/form-data">
-    <label for="produktName">Name des Produktes*:</label>
-    <input type="text" id="produktName" name="productName" required ><br><br>
+    <form method="post" th:action="@{/produkterstellung}" enctype="multipart/form-data">
+        <div class="form-group">
+            <label for="produktName">Name des Produktes*:</label>
+            <input type="text" id="produktName" name="productName" required class="form-control">
+        </div>
 
-    <label for="bild">Bild*:</label>
-    <input type="file" id="bild" name="image" accept="image/*" required><br><br>
+        <div class="form-group">
+            <label for="bild">Bild*:</label>
+            <input type="file" id="bild" name="image" accept="image/*" required class="form-control-file">
+        </div>
 
-    <label for="preis">Preis*:</label>
-    <input type="number" step="0.01" min="0.0" id="preis" name="price" required><span>€</span><br><br>
+        <div class="form-group">
+            <label for="preis">Preis*:</label>
+            <input type="number" step="0.01" min="0.0" id="preis" name="price" required class="form-control">
+            <span>€</span>
+        </div>
 
-    <label for="verfügbarkeit">Verfügbarkeit:</label><br>
-        <select name="availability" id="verfügbarkeit">
-            <option th:each="availabilityOpt : ${T(com.example.softwaretechnik2.model.Availability).values()}"
-                    th:value="${availabilityOpt}" th:text="${availabilityOpt.displayValue}"></option>
-        </select><br><br>
+        <div class="form-group">
+            <label for="verfügbarkeit">Verfügbarkeit:</label>
+            <select name="availability" id="verfügbarkeit" class="form-control">
+                <option th:each="availabilityOpt : ${T(com.example.softwaretechnik2.model.Availability).values()}"
+                        th:value="${availabilityOpt}" th:text="${availabilityOpt.displayValue}"></option>
+            </select>
+        </div>
 
-    <label for="halal">Halal?</label>
-    <input type="checkbox" id="halal" name="halal"><br><br>
+        <div class="form-group form-check">
+            <label for="halal" class="form-check-label">
+                <input type="checkbox" id="halal" name="halal" class="form-check-input"> Halal?
+            </label>
+        </div>
 
-    <label for="koscher">Koscher?</label>
-    <input type="checkbox" id="koscher" name="kosher"><br><br>
+        <div class="form-group form-check">
+            <label for="koscher" class="form-check-label">
+                <input type="checkbox" id="koscher" name="kosher" class="form-check-input"> Koscher?
+            </label>
+        </div>
 
-    <label for="vegetarisch">Vegetarisch?</label>
-    <input type="checkbox" id="vegetarisch" name="vegetarian"><br><br>
+        <div class="form-group form-check">
+            <label for="vegetarisch" class="form-check-label">
+                <input type="checkbox" id="vegetarisch" name="vegetarian" class="form-check-input"> Vegetarisch?
+            </label>
+        </div>
 
-    <label for="vegan">Vegan?</label>
-    <input type="checkbox" id="vegan" name="vegan"><br><br>
+        <div class="form-group form-check">
+            <label for="vegan" class="form-check-label">
+                <input type="checkbox" id="vegan" name="vegan" class="form-check-input"> Vegan?
+            </label>
+        </div>
 
-    <label for="allergene">Moegliche Allergene:</label><br>
-    <textarea id="allergene" name="allergens"></textarea><br><br> <!--resize off-->
+        <div class="form-group">
+            <label for="allergene">Moegliche Allergene:</label>
+            <textarea id="allergene" name="allergens" class="form-control">Keine</textarea>
+        </div>
 
-    <label for="inhaltsstoffe">Zutaten:</label><br>
-    <datalist id="inhaltsstoffe"></datalist>
-    <label><input type="text" list="inhaltsstoffe" multiple></label><br>
-    <details>
-        <summary>Liste an Inhaltsstoffen</summary>
-        <p>Weizenmehl<br>Kuhmilch<br>Zucker<br>Kaffee<br>Wasser<br>Kakao</p>
-    </details>
+        <div class="form-group">
+            <label for="inhaltsstoffe">Zutaten:</label>
+            <input type="text" list="inhaltsstoffe" id="ingredient-input" name="ingredients" class="form-control">
+            <datalist id="inhaltsstoffe">
+                <option>Weizenmehl</option>
+                <option>Kuhmilch</option>
+                <option>Zucker</option>
+                <option>Kaffee</option>
+                <option>Wasser</option>
+                <option>Kakao</option>
+            </datalist>
+        </div>
+        <details>
+            <summary>Liste an Inhaltsstoffen</summary>
+            <p>Weizenmehl<br>Kuhmilch<br>Zucker<br>Kaffee<br>Wasser<br>Kakao</p>
+        </details>
 
-    <p>Pflichtfelder sind mit '*' gekennzeichnet.</p> <!--cursive-->
-    <input type="submit" value="Produkt speichern" onclick="showNotification()">
-    <button type="button" class="btn btn-primary m-lg-3" th:onclick="|window.location.href='/product'|">Produktseite</button>
-    <button type="button" class="btn btn-primary m-lg-3" th:onclick="|window.location.href='/start'|">Startseite</button>
-
-</form>
+        <p>Pflichtfelder sind mit '*' gekennzeichnet.</p>
+        <input type="submit" value="Produkt speichern" onclick="showNotification()" class="btn btn-primary">
+        <button type="button" class="btn btn-primary" th:onclick="|window.location.href='/product'|">Produktseite
+        </button>
+        <button type="button" class="btn btn-primary" th:onclick="|window.location.href='/product'|">Startseite</button>
+    </form>
+</div>
+
+<script>
+    $(document).ready(function () {
+        $('#ingredient-input').on('input', function () {
+            const inputField = $(this);
+            const selectedIngredient = inputField.val();
+            const options = $('#inhaltsstoffe option');
+
+            options.each(function() {
+                if ($(this).val() === selectedIngredient) {
+                    const currentValue = inputField.data('selected') || '';
+                    const newValue = currentValue ? currentValue + ', ' + selectedIngredient : selectedIngredient;
+                    inputField.data('selected', newValue);
+                    inputField.val(newValue);
+                }
+            });
+        });
+    });
+</script>
 </body>
 </html>
